apiVersion: v1
kind: Service
metadata:
  name: atomic
spec:
  ports:
  - port: 1880
    targetPort: 1880
    nodePort: 30407
  selector:
    app: atomic
  type: NodePort

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: atomic
spec:
  serviceName: atomic
  replicas: 1
  selector:
    matchLabels:
      app: atomic
  template:
    metadata:
      labels:
        app: atomic
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      initContainers:
      - name: clone-assets
        image: alpine/git
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            rm -rf /assets/*
            rm -rf /assets/.[!.]* || true
            cd /assets
            git config --global init.defaultBranch main
            git init
            git remote add origin https://github.com/BrobridgeOrg/gravity-k8s.git
            git config core.sparseCheckout true
            echo "assets/atomic" >> .git/info/sparse-checkout
            echo "assets/atomic-flow" >> .git/info/sparse-checkout
            git pull --set-upstream origin main
        volumeMounts:
          - name: atomic-assets
            mountPath: "/assets"
      containers:
      - name: atomic
        image: "brobridgehub/atomic-labdemo:v0.0.5-20230413-01"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 1880
        env:
        - name: TARGET_TESTDB_READY_FILE
          value: /e2e_status/.target_testdb_ready
        volumeMounts:
        - name: e2e-status-volume
          mountPath: /e2e_status
        command: ["/bin/sh", "-c"]
        args: 
        - |
          # echo "Waiting for target E2Etest DB to be ready"
          # while [ ! -f $$TARGET_TESTDB_READY_FILE ]; do
          #   echo "Waiting for target E2Etest DB to be ready"
          #   sleep 1
          # done
          #cp /assets/assets/atomic-flow/flows.json /data/atomic/
          npm start --cache /assets/assets/atomic/.npm -- --userDir /assets/assets/atomic /assets/assets/atomic-flow/flows.json
        volumeMounts:
          - name: atomic-assets
            mountPath: "/assets"
  volumeClaimTemplates:
  - metadata:
      name: e2e-status-volume
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: atomic-assets
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
